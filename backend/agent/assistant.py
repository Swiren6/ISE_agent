from config.database import get_db_connection,get_db
from langchain_community.utilities import SQLDatabase
from typing import List, Dict, Optional, Any, Tuple
from agent.llm_utils import ask_llm 
from langchain.prompts import PromptTemplate
import os
from dotenv import load_dotenv  
from agent.template_matcher.matcher import SemanticTemplateMatcher
import re
from pathlib import Path
from agent.cache_manager import CacheManager
from agent.sql_agent import SQLAgent
import json


load_dotenv()

# assistant.py - Corrections dans le PROMPT_TEMPLATE

PROMPT_TEMPLATE = PromptTemplate(
    input_variables=["input", "table_info", "relevant_domain_descriptions", "relations"],
    template=f"""
[SYSTEM] Vous √™tes un assistant SQL expert pour une base de donn√©es scolaire.
Votre r√¥le est de traduire des questions en fran√ßais en requ√™tes SQL MySQL.

ATTENTION: 
***- Pour les absences : absence.Inscription = inscriptioneleve.id
***Pour lier √©l√®ve et personne : eleve.IdPersonne = personne.id
**l'ann√©e scolaire se trouve dans anneescolaire.AnneeScolaire non pas dans Annee 
** si on dit l'annee XXXX/YYYY on parle de l'ann√©e scolaire XXXX/YYYY 
**les table eleve et parent ne contienne pas les noms et les prenoms . ils se trouvent dans la table personne.
**les table eleve et parent ne contienne pas les num√©ro de telephnone Tel1 et Tel2 . ils se trouvent dans la table personne.
**les colonnes principale  du table personne sont : id, NomFr, PrenomFr, NomAr , PrenomAr, Cin,AdresseFr, AdresseAr, Tel1, Tel2,Nationalite,Localite,Civilite.
**la trimestre 3 est d id 33, trimestre 2 est d id 32 , trimestre 1 est d id 31.

**CORRECTION IMPORTANTE POUR LES ABSENCES:**
**la table absence contient une colonne "Inscription" (pas "inscriptioneleve") qui fait r√©f√©rence √† inscriptioneleve.id
**pour les absences d'un √©l√®ve, faire: absence.Inscription = inscriptioneleve.id

**lorsque on veut avoir l id d un eleve  on fait cette jointure : 
id_inscription IN (
        SELECT id
        FROM inscriptioneleve
        WHERE Eleve IN (
            SELECT id
            FROM eleve
            WHERE IdPersonne = "num√©ro de id "
        )
**lorsque on veut savoir l id de la s√©ance on fait la jointure suivante : s.id=e.SeanceDebut  avec s pour la seance et e pour Emploidutemps 
**lorsque on demande l etat de paiement on ne mais pas p.Annuler=0 avec p paiement ni CASE
        WHEN p.Annuler = 1 THEN 'Annul√©'
        ELSE 'Actif'
    END AS statut_paiement.
**lorsque on veut savoir le paiement extra d un eleve on extrait le motif_paiement, le totalTTC  et le reste en faisant  la jointure entre le paiementextra et paiementextradetails d'une cot√© et paiementextra et paiementmotif d'une autre cot√© .
**lorsque on demande les d√©tails de paiement scolaire on extrait le mode de reglement ,num√©ro de ch√®que , montant et la date de l'op√©ration. 
**lorsque on demande l'mploi du temps d'un classe pr√©cie avec un jour pr√©cie on extrait le nom , le pr√©nom de l'enseignant ,le nom de la mati√®re , le nom de la salle , le debut et la fin de s√©ance et le libelle de groupe (par classe...)
**Les coordon√©es de debut et de la fin de s√©ance se trouve dans le table emploidutemps sous forme d'id ,les covertir en heures a l'aide de table seance . 
**la semaine A est d'id 2 , la semaine B est d'id 3 , Sans semaine d'id 1.
**les colonnes principale  du table personne sont : id, NomFr, PrenomFr, NomAr , PrenomAr, Cin,AdresseFr, AdresseAr, Tel1, Tel2,Nationalite,Localite,Civilite.
**pour les nom de jour en fran√ßais on a une colone libelleJourFr avec mercredi c est ecrite Mercredi . 
**utiliser des JOINs explicites . exemple au lieu de :WHERE
    e.Classe = (SELECT id FROM classe WHERE CODECLASSEFR = '7B2')
    AND e.Jour = (SELECT id FROM jour WHERE libelleJourFr = 'Mercredi')
    ecrire:
 JOIN
     jour j ON e.Jour = j.id AND j.libelleJourFr = 'Mercredi'
JOIN
     classe c ON e.Classe = c.id AND c.CODECLASSEFR = '7B2'
**les r√©sultats des trimestres se trouve dans le table Eduresultatcopie .
**l id de l eleve est li√©e par l id de la personne par Idpersonne 
**les eleves nouvellemmnent inscris ont un TypeInscri="N" et les eleves qui ont etudi√© auparavant a l'ecole ont TypeInscri="R".
**un √©leves n'est pas r√©inscri est √©leves qui est inscrits pendant l'ann√©e pr√©c√©dante et pas pour cette ann√©e . 
**la d√©cision d'acceptation consernent seulement les nouveaux eleves inscrits a l'ecole.
**pour les cheques a echeance non valides consulter la table reglementeleve_echeancier .
**les cheques echancier non valide le champ isvalide=0.

Voici la structure d√©taill√©e des tables pertinentes pour votre t√¢che (nom des tables, colonnes et leurs types) :
{{table_info}}

---
**Description des domaines pertinents pour cette question :**
{{relevant_domain_descriptions}}

---
**Informations Cl√©s et Relations Fr√©quemment Utilis√©es pour une meilleure performance :**
{{relations}}

---
**Instructions pour la g√©n√©ration SQL :**
1.  R√©pondez UNIQUEMENT par une requ√™te SQL MySQL valide et correcte.
2.  Ne mettez AUCUN texte explicatif ou commentaire avant ou apr√®s la requ√™te SQL. La r√©ponse doit √™tre purement la requ√™te.
3.  **S√©curit√© :** G√©n√©rez des requ√™tes `SELECT` uniquement. Ne g√©n√©rez **JAMAIS** de requ√™tes `INSERT`, `UPDATE`, `DELETE`, `DROP`, `ALTER`, `TRUNCATE` ou toute autre commande de modification/suppression de donn√©es.
4.  **Gestion de l'Ann√©e Scolaire :** Si l'utilisateur mentionne une ann√©e au format 'YYYY-YYYY' (ex: '2023-2024'), interpr√©tez-la comme √©quivalente √† 'YYYY/YYYY' et utilisez ce format pour la comparaison sur la colonne `Annee` de `anneescolaire` ou pour trouver l'ID correspondant.
5.  **Robustesse aux Erreurs et Synonymes :** Le mod√®le doit √™tre tol√©rant aux petites fautes de frappe et aux variations de langage. Il doit s'efforcer de comprendre l'intention de l'utilisateur m√™me si les termes ne correspondent pas exactement aux noms de colonnes ou de tables. Par exemple, "eleves" ou "√©tudiants" devraient √™tre mapp√©s √† la table `eleve`. "Moyenne" ou "r√©sultat" devraient faire r√©f√©rence √† `dossierscolaire.moyenne_general` ou `edumoymati`.


Question : {{input}}
Requ√™te SQL :
"""
)


class SQLAssistant:
        def __init__(self,db=None   ):
            self.db = db if db is not None else get_db_connection()
            self.sql_agent = SQLAgent(self.db)
            self.relations_description = self._safe_load_relations()
            self.domain_descriptions = self._safe_load_domain_descriptions()
            self.domain_to_tables_mapping = self._safe_load_domain_to_tables_mapping()
            self.ask_llm = ask_llm
            self.cache =CacheManager()
            self.template_matcher = SemanticTemplateMatcher()
            
            try:
                self.templates_questions = self.load_question_templates()
                if self.templates_questions:
                    print(f"‚úÖ {len(self.templates_questions)} templates charg√©s")
                    self.template_matcher.load_templates(self.templates_questions)
                else:
                    print("‚ö†Ô∏è Aucun template valide - fonctionnement en mode LLM seul")
                    
            except ValueError as e:
                print(f"‚ùå Erreur de chargement des templates: {str(e)}")
                self.templates_questions = []

        def load_question_templates(self) -> list:
            print("üîç Chargement des templates de questions...")
            try:
                # Chemin absolu plus fiable
                templates_path = Path(__file__).parent / 'templates_questions.json'
                
                # V√©rification approfondie du fichier
                if not templates_path.exists():
                    print(f"‚ö†Ô∏è Fichier non trouv√©, cr√©ation: {templates_path}")
                    templates_path.write_text('{"questions": []}', encoding='utf-8')
                    return []

                content = templates_path.read_text(encoding='utf-8').strip()
                if not content:
                    print("‚ö†Ô∏è Fichier vide, r√©initialisation")
                    templates_path.write_text('{"questions": []}', encoding='utf-8')
                    return []

                # Validation JSON stricte
                try:
                    data = json.loads(content)
                    if not isinstance(data.get("questions", []), list):
                        raise ValueError("Format invalide: 'questions' doit √™tre une liste")
                    
                    # Validation de chaque template
                    valid_templates = []
                    for template in data["questions"]:
                        if all(key in template for key in ["template_question", "requete_template"]):
                            valid_templates.append(template)
                        else:
                            print(f"‚ö†Ô∏è Template incomplet ignor√©: {template.get('description', 'sans description')}")
                    
                    return valid_templates

                except json.JSONDecodeError as e:
                    print(f"‚ùå Fichier JSON corrompu, r√©initialisation. Erreur: {e}")
                    backup_path = templates_path.with_suffix('.bak.json')
                    templates_path.rename(backup_path)
                    templates_path.write_text('{"questions": []}', encoding='utf-8')
                    return []

            except Exception as e:
                print(f"‚ùå Erreur critique lors du chargement: {e}")
                return []
        
        def find_matching_template(self, question: str) -> Optional[Dict[str, Any]]:
            print(f"üîç Recherche de template pour la question")
            exact_match = self._find_exact_template_match(question)
            if exact_match:
                return exact_match
            
            semantic_match, score = self.template_matcher.find_similar_template(question)
            if semantic_match:
                print(f"üîç Template s√©mantiquement similaire trouv√© (score: {score:.2f})")
                return self._extract_variables(question, semantic_match)
            
            return None

        def _find_exact_template_match(self, question: str) -> Optional[Dict[str, Any]]:
            cleaned_question = question.rstrip(' ?')
            for template in self.templates_questions:
                pattern = template["template_question"]
                regex_pattern = re.sub(r'\{(.+?)\}', r'(?P<\1>.+?)', pattern)
                match = re.fullmatch(regex_pattern, cleaned_question, re.IGNORECASE)
                if match:
                    variables = {k: v.strip() for k, v in match.groupdict().items()}
                    return {
                        "template": template,
                        "variables": variables if variables else {}
                    }
            return None
        
        def _extract_variables(self, question: str, template: Dict) -> Dict[str, Any]:
            template_text = template["template_question"]
            variables = {}

            annee_pattern = r"(20\d{2}[-\/]20\d{2})"
            annee_match = re.search(annee_pattern, question)
            if annee_match:
                variables["AnneeScolaire"] = annee_match.group(1).replace("-", "/")
            
            var_names = re.findall(r'\{(.+?)\}', template_text)
            for var_name in var_names:
                if var_name not in variables:  
                    keyword_pattern = re.escape(template_text.split(f"{{{var_name}}}")[0].split()[-1])
                    pattern = fr"{keyword_pattern}\s+([^\s]+)"
                    match = re.search(pattern, question, re.IGNORECASE)
                    if match:
                        variables[var_name] = match.group(1).strip(",.?!")
            
            return {
                "template": template,
                "variables": variables if variables else {}
            }

        def generate_query_from_template(self, template: Dict, variables: Dict) -> str:
            requete = template["requete_template"]
            if not variables:
                return requete
            
            for var_name, var_value in variables.items():
                clean_value = str(var_value).split('?')[0].strip(",.!?\"'")
                
                if var_name.lower() == "anneescolaire":
                    clean_value = clean_value.replace("-", "/")
                
                requete = requete.replace(f'{{{var_name}}}', clean_value)
            
            return requete
        
        def _filter_table_columns(self, table_block: str, question: str) -> str:
            lines = table_block.split('\n')
            if not lines:  # ‚Üê Ajouter cette v√©rification
                return table_block
                
            filtered_lines = [lines[0]]  
            
            for line in lines[1:]:
                if any(keyword.lower() in line.lower() for keyword in ['nom', 'prenom', 'date', 'absence']):
                    filtered_lines.append(line)
            
            return '\n'.join(filtered_lines) 

        def get_relevant_domains(self, query: str, domain_descriptions: Dict[str, str]) -> List[str]:
            """Identifies relevant domains based on a user query using DeepSeek."""
            domain_desc_str = "\n".join([f"- {name}: {desc}" for name, desc in domain_descriptions.items()])
            domain_prompt_content = f"""
            Based on the following user question, identify ALL relevant domains from the list below.
            Return only the names of the relevant domains, separated by commas. If no domain is relevant, return 'None'.

            User Question: {query}

            Available Domains and Descriptions:
            {domain_desc_str}

            Relevant Domains (comma-separated):
            """
            
            try:
                response = self.ask_llm(domain_prompt_content)
                domain_names = response.strip()
                
                if domain_names.lower() == 'none' or not domain_names:
                    return []
                return [d.strip() for d in domain_names.split(',')]
            except Exception as e:
                print(f"‚ùå Erreur lors de l'identification des domaines: {e}")
                return []
        
        
        def _format_tabular_result(self, headers: list, rows: list, question: str = "") -> str:
            """Formate les r√©sultats sous forme de tableau"""
            output = [f"**{question}**"] if question else []
            output.append(" | ".join(headers))
            output.append("-+-".join(['-' * len(h) for h in headers]))
            for row in rows:
                output.append(" | ".join(row))
            return "\n".join(output) 
        def _format_string_result(self, result_str: str, question: str = "") -> str:
            """Formate un r√©sultat de type string retourn√© par db.run()"""
            if not result_str.strip():
                return "‚úÖ Requ√™te ex√©cut√©e mais aucun r√©sultat trouv√©."
            
            # Si c'est un r√©sultat simple (nombre, etc.)
            lines = result_str.strip().split('\n')
            if len(lines) == 1:
                return f"R√©sultat : {lines[0]}"
            
            # Si c'est un tableau de r√©sultats
            output = [f"**{question}**"] if question else []
            output.extend(lines)
            return "\n".join(output)
        
        def get_tables_from_domains(self, domains: List[str], domain_to_tables_map: Dict[str, List[str]]) -> List[str]:
            """Retrieves all tables associated with the given domains."""
            tables = []
            for domain in domains:
                tables.extend(domain_to_tables_map.get(domain, []))
            return sorted(list(set(tables)))
    
                
        def debug_table_info(self, tables=None):
            """Debug pour voir exactement ce que retourne get_table_info"""
            try:
                if tables:
                    table_info = self.db.get_table_info(table_names=tables)
                else:
                    table_info = self.db.get_table_info()
                
                print("="*50)
                print("DEBUG TABLE INFO:")
                print("="*50)
                print(table_info)
                print("="*50)
                return table_info
            except Exception as e:
                print(f"‚ùå Erreur debug_table_info: {e}")
                return "Erreur debug"
            
        def _safe_load_relations(self) -> str:
            """Charge les relations avec gestion d'erreurs"""
            try:
                relations_path = Path(__file__).parent / 'prompts' / 'relations.txt'  
                print(f"üîç Tentative de chargement depuis : {relations_path.absolute()}")# Log du chemin

                          
                if relations_path.exists():
                    content = relations_path.read_text(encoding='utf-8')
                    print(f"‚úÖ Contenu charg√© (premi√®res 50 lignes) :\n{content[:500]}...")  # Aper√ßu du contenu
                    return content
                else:
                    print("‚ö†Ô∏è Fichier relations.txt non trouv√©")
                    return "# Aucune relation d√©finie"
                    
            except Exception as e:
                print(f"‚ùå Erreur lors du chargement : {str(e)}")
                return "# Erreur chargement relations"
                
        def _safe_load_domain_descriptions(self) -> dict:
            """Charge les descriptions de domaine avec gestion d'erreurs"""
            try:
                domain_path = Path(__file__).parent / 'prompts' / 'domain_descriptions.json'
                if domain_path.exists():
                    with open(domain_path, 'r', encoding='utf-8') as f:
                        return json.load(f)
                print("‚ö†Ô∏è Fichier domain_descriptions.json non trouv√©")
                return {}
            except Exception as e:
                print(f"‚ùå Erreur chargement domain descriptions: {e}")
                return {}
        
        def _safe_load_domain_to_tables_mapping(self) -> dict:
            """Charge le mapping domaine-tables avec gestion d'erreurs"""
            try:
                mapping_path = Path(__file__).parent / 'prompts' / 'domain_tables_mapping.json'
                if mapping_path.exists():
                    with open(mapping_path, 'r', encoding='utf-8') as f:
                        return json.load(f)
                print("‚ö†Ô∏è Fichier domain_tables_mapping.json non trouv√©")
                return {}
            except Exception as e:
                print(f"‚ùå Erreur chargement domain mapping: {e}")
                return {}
        
        def _safe_load_question_templates(self) -> list:
            """Charge les templates avec gestion d'erreurs robuste"""
            try:
                templates_path = Path(__file__).parent / 'templates_questions.json'
                
                if not templates_path.exists():
                    print(f"‚ö†Ô∏è Cr√©ation fichier templates: {templates_path}")
                    templates_path.write_text('{"questions": []}', encoding='utf-8')
                    return []

                content = templates_path.read_text(encoding='utf-8').strip()
                if not content:
                    return []

                data = json.loads(content)
                if not isinstance(data.get("questions", []), list):
                    return []
                
                valid_templates = []
                for template in data["questions"]:
                    if all(key in template for key in ["template_question", "requete_template"]):
                        valid_templates.append(template)
                
                return valid_templates

            except Exception as e:
                print(f"‚ùå Erreur chargement templates: {e}")
                return []

        def get_student_info_by_name(self, full_name):
            """R√©cup√®re les infos d'un √©l√®ve depuis la base de donn√©es"""
            return self.sql_agent.get_student_info_by_name(full_name)

        def _trim_history(self):
            while self.conversation_history and sum(msg['tokens'] for msg in self.conversation_history) > self.max_history_tokens:
                self.conversation_history.pop(0)

        def _build_response(self, response, sql_query=None, db_results=None, tokens=0, cost=0):
            return {
                "response": response,
                "sql_query": sql_query,
                "db_results": db_results,
                "tokens_used": tokens,
                "estimated_cost_usd": cost,
                "conversation_id": id(self.conversation_history)
            }

        def ask_question(self, question: str) -> Tuple[str, str]:
            # 1. V√©rifier le cache
            cached_response = self.cache.get_cached_query(question)
            if cached_response:
                logger.info("Cache hit!")
                sql_query = cached_response['sql_query']
                formatted_result = cached_response['result']
                return sql_query, formatted_result

            # 2. Tenter de faire correspondre un template s√©mantique
            template_match = self.find_matching_template(question)
            template_match = self.find_matching_template(question)
    
            if template_match:
                sql_query = self.generate_query_from_template(
                    template_match["template"],
                    template_match.get("variables", {})
                )
                logger.info(f"Template match: {sql_query}")
                
                try:
                    conn = get_db()
                    cursor = conn.cursor(dictionary=True)
                    cursor.execute(sql_query)
                    
                    result = cursor.fetchall()
                    cursor.close()
                    if hasattr(conn, '_direct_connection'):
                        conn.close()

                    formatted_result = self.format_sql_result(result, question)
                    self.cache.cache_query(question, sql_query)
                    
                    return sql_query, formatted_result
                    
                except Exception as db_error:
                    error_msg = str(db_error)
                    logger.error(f"Erreur d'ex√©cution SQL (template): {error_msg}")
                    return sql_query, f"‚ùå Erreur d'ex√©cution SQL (template) : {error_msg}"
                    # 3. Si aucun template ne correspond, utiliser le LLM
            else:
                logger.info("No template match, using LLM.")
                table_info = self.db.get_table_info_as_str()
                
                relevant_tables_from_question = re.findall(r'\b(eleve|enseignant|matiere|note|absence|personnel|inscriptioneleve|parent|niveau|personne|salle|niveauetude|typepersonnel|cycleetude|section|semainematiere|annee_scolaire)\b', question, re.IGNORECASE)
                relevant_tables_info = []
                relevant_domains = set()

                for table_name in set(relevant_tables_from_question):
                    table_schema = self.db.get_table_info_as_str([table_name])
                    if table_schema:
                        relevant_tables_info.append(table_schema)
                        if table_name.lower() in self.domain_descriptions:
                            relevant_domains.add(self.domain_descriptions[table_name.lower()])
                
                # If no specific tables are mentioned, provide schema for common tables
                if not relevant_tables_info:
                    logger.info("No specific tables found in question, using common tables.")
                    common_tables = ['eleve', 'personne', 'inscriptioneleve', 'absence', 'note', 'matiere', 'enseignant', 'niveau']
                    for table_name in common_tables:
                        table_schema = self.db.get_table_info_as_str([table_name])
                        if table_schema:
                            relevant_tables_info.append(table_schema)
                            if table_name.lower() in self.domain_descriptions:
                                relevant_domains.add(self.domain_descriptions[table_name.lower()])

                filtered_blocks = [self._filter_table_columns(block, question) for block in relevant_tables_info]
                filtered_blocks = [block for block in filtered_blocks if block.strip()] # Remove empty blocks
                
                domain_desc = ", ".join(sorted(list(relevant_domains))) if relevant_domains else "informations g√©n√©rales sur la base de donn√©es scolaire."

                prompt = PROMPT_TEMPLATE.format(
                    input=question,
                    table_info="\n\n".join(filtered_blocks),
                    relevant_domain_descriptions=domain_desc,
                    relations=self.relations_description
                )

                llm_response = self.ask_llm(prompt)
                sql_query = llm_response.replace("```sql", "").replace("```", "").strip()
                
                if not sql_query:
                    return "", "‚ùå La requ√™te g√©n√©r√©e est vide."

                # Ex√©cution de la requ√™te
                try:
                    conn = get_db()
                    cursor = conn.cursor()
                    cursor.execute(sql_query)
                    
                    # Fetch results directly as DictCursor is configured
                    result = cursor.fetchall()
                    
                    cursor.close()
                    if hasattr(conn, '_direct_connection'):
                        conn.close()

                    formatted_result = self.format_sql_result(result, question)
                    self.cache.cache_query(question, sql_query)
                    
                    attestation = self.generate_attestation(sql_query, formatted_result)
                    if attestation:
                        formatted_result += f"\n\n{attestation}"

                    return sql_query, formatted_result
                    
                except Exception as db_error:
                    error_msg = str(db_error)
                    logger.error(f"Erreur d'ex√©cution SQL : {error_msg}")
                    return sql_query, f"‚ùå Erreur d'ex√©cution SQL : {error_msg}"

        
        def format_structured_result(self, result: Any, question: str = "") -> str:
            """Formate les r√©sultats SQL de mani√®re structur√©e"""
            # ‚úÖ R√©utiliser la m√™me logique que format_sql_result
            return self.format_sql_result(result, question)

        def get_response(self, user_query, user_id=None):
            if user_id:
                print(f"üîê Utilisateur connect√© : {user_id}")
            # ‚ú® D√©tection demande d'attestation
            if "attestation de pr√©sence" in user_query.lower():
                from pdf_utils.attestation import export_attestation_pdf

                # üëâ Tu peux rendre √ßa dynamique plus tard
                donnees_etudiant = {
                    "nom": "Rania Zahraoui",
                    "date_naissance": "15/03/2005",
                    "matricule": "2023A0512",
                    "etablissement": "Lyc√©e Pilote de Sfax",
                    "classe": "3√®me Sciences",
                    "annee_scolaire": "2024/2025",
                    "lieu": "Sfax"
                }

                pdf_path = export_attestation_pdf(donnees_etudiant)
                return {
                    "response": f"L'attestation a √©t√© g√©n√©r√©e : <a href='/{pdf_path.replace(os.sep, '/')}' download>T√©l√©charger le PDF</a>"
                }

            try:
                # Utilisation de la logique SQL existante
                sql_query, formatted_result = self.ask_question(user_query)
                
                # Generate natural language response using LLM
                if formatted_result and not formatted_result.startswith("‚ùå"):
                    prompt = f"""
                    Question de l'utilisateur: {user_query}
                    Requ√™te SQL g√©n√©r√©e: {sql_query}
                    R√©sultats: {formatted_result[:1000]}
                    
                    Tu es un assistant p√©dagogique. Reformule ces r√©sultats SQL bruts en r√©ponse naturelle, utile et claire en fran√ßais.
                    """
                    
                    try:
                        natural_response = self.ask_llm(prompt)
                        return {
                            "response": natural_response,
                            "sql_query": sql_query,
                            "raw_results": formatted_result
                        }
                    except Exception as llm_error:
                        # Fallback: retourner le r√©sultat format√© si LLM √©choue
                        return {
                            "response": formatted_result,
                            "sql_query": sql_query,
                            "raw_results": formatted_result,
                            "llm_error": str(llm_error)
                        }
                else:
                    return {
                        "response": formatted_result or "Aucun r√©sultat trouv√©.",
                        "sql_query": sql_query
                    }
                    
            except Exception as e:
                return {
                    "response": f"D√©sol√©, une erreur s'est produite: {str(e)}",
                    "sql_query": None,
                    "error": str(e)
                }
                
        def format_sql_result(self, result: Any, question: str = "") -> str:
            """Formate les r√©sultats SQL de mani√®re robuste"""
            if not result:
                return "‚úÖ Requ√™te ex√©cut√©e mais aucun r√©sultat trouv√©."

            try:
                # Cas 1: R√©sultat est d√©j√† une string
                if isinstance(result, str):
                    return self._format_string_result(result, question)
                
                # Cas 2: R√©sultat est un dictionnaire (pour COUNT, SUM etc.)
                if isinstance(result, dict):
                    return "\n".join([f"{k}: {v}" for k, v in result.items()])
                
                # Cas 3: R√©sultat est une liste
                if isinstance(result, list):
                    if not result:
                        return "‚úÖ Requ√™te ex√©cut√©e mais aucun r√©sultat trouv√©."
                        
                    # Cas 3.1: Liste de dictionnaires
                    if isinstance(result[0], dict):
                        headers = list(result[0].keys())
                        rows = [[str(row.get(h, '')) for h in headers] for row in result]
                        return self._format_tabular_result(headers, rows, question)
                    
                    # Cas 3.2: Liste de tuples/listes
                    elif isinstance(result[0], (tuple, list)):
                        if cursor := getattr(self.db, '_last_cursor', None):
                            headers = [desc[0] for desc in cursor.description]
                        else:
                            headers = [f"Colonne_{i+1}" for i in range(len(result[0]))]
                        
                        rows = [[str(cell) for cell in row] for row in result]
                        return self._format_tabular_result(headers, rows, question)
                
                # Cas par d√©faut
                return f"R√©sultat : {str(result)}"
            
            except Exception as e:
                return f"‚ùå Erreur de formatage : {str(e)}\nR√©sultat brut: {str(result)[:500]}"       
        
            """Traite une question et retourne la requ√™te SQL et la r√©ponse format√©e"""
            # 1. V√©rification du cache
            cached = self.cache.get_cached_query(question)
            if cached:
                sql_template, variables = cached
                sql_query = sql_template
                for column, value in variables.items():
                    sql_query = sql_query.replace(f"{{{column}}}", value)
                
                print("‚ö° Requ√™te r√©cup√©r√©e depuis le cache")
                try:
                    conn = get_db()
                    cursor = conn.cursor()  # Retrait de dictionary=True
                    cursor.execute(sql_query)
                    
                    # R√©cup√©ration manuelle des r√©sultats sous forme de dict
                    columns = [col[0] for col in cursor.description]
                    result = [dict(zip(columns, row)) for row in cursor.fetchall()]
                    
                    cursor.close()
                    if hasattr(conn, '_direct_connection'):
                        conn.close()
                    
                    return sql_query, self.format_sql_result(result, question)
                except Exception as db_error:
                    return sql_query, f"‚ùå Erreur d'ex√©cution SQL : {str(db_error)}"

            # 2. V√©rification des templates
            template_match = self.find_matching_template(question)
            if template_match:
                print("üîç Utilisation d'un template pr√©-enregistr√©")
                sql_query = self.generate_query_from_template(
                    template_match["template"],
                    template_match["variables"]
                )
                
                try:
                    conn = get_db()
                    cursor = conn.cursor()  # Retrait de dictionary=True
                    cursor.execute(sql_query)
                    
                    # Conversion manuelle en dictionnaire
                    columns = [col[0] for col in cursor.description]
                    result = [dict(zip(columns, row)) for row in cursor.fetchall()]
                    
                    cursor.close()
                    if hasattr(conn, '_direct_connection'):
                        conn.close()
                    
                    formatted_result = self.format_sql_result(result, question)
                    self.cache.cache_query(question, sql_query)
                    return sql_query, formatted_result
                except Exception as db_error:
                    return sql_query, f"‚ùå Erreur d'ex√©cution SQL : {str(db_error)}"

            # 3. G√©n√©ration via LLM (reste identique)
            print("üîç G√©n√©ration via LLM")
            if not self.db:
                raise RuntimeError("Connexion DB non initialis√©e")

            relevant_domains = self.get_relevant_domains(question, self.domain_descriptions)
            tables = self.get_tables_from_domains(relevant_domains, self.domain_to_tables_mapping)
            
            all_table_info = self.db.get_table_info() 
            filtered_blocks = [
                block for block in all_table_info.split('\n\n') 
                if any(table in block.split('\n')[0] for table in tables)
            ]

            domain_desc = "\n".join([
                f"{d}: {self.domain_descriptions.get(d, '')}" 
                for d in relevant_domains
            ])

            prompt = PROMPT_TEMPLATE.format(
                input=question,
                table_info="\n\n".join(filtered_blocks),
                relevant_domain_descriptions=domain_desc,
                relations=self.relations_description
            )

            llm_response = self.ask_llm(prompt)
            sql_query = llm_response.replace("```sql", "").replace("```", "").strip()
            
            if not sql_query:
                return "", "‚ùå La requ√™te g√©n√©r√©e est vide."

            # Ex√©cution de la requ√™te
            try:
                conn = get_db()
                cursor = conn.cursor()  # Retrait de dictionary=True
                cursor.execute(sql_query)
                
                # Conversion manuelle en dictionnaire
                columns = [col[0] for col in cursor.description]
                result = [dict(zip(columns, row)) for row in cursor.fetchall()]
                
                cursor.close()
                if hasattr(conn, '_direct_connection'):
                    conn.close()

                formatted_result = self.format_sql_result(result, question)
                self.cache.cache_query(question, sql_query)
                
                return sql_query, formatted_result
                
            except Exception as db_error:
                error_msg = str(db_error)
                return sql_query, f"‚ùå Erreur d'ex√©cution SQL : {error_msg}"